/**
 * Lovingly created (for free) by:
 * @author Aaron Vizzini
 * @See eclaimer.Main for more information.
 */

package eclaimer.GUI;

import eclaimer.BaseObjects.ClaimSheet;
import eclaimer.UIControllers.ClaimSheetDataController;
import eclaimer.UIControllers.ClaimSheetSearchController;
import eclaimer.DatabaseManager;
import eclaimer.BaseObjects.Eclaim;
import eclaimer.FileManager;
import eclaimer.GlobalUpdater;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;

public class ClaimSheetManager extends javax.swing.JFrame {

    private ClaimSheetDataController claimSheetDataController;
    private ClaimSheetSearchController claimSheetSearchController;

    /** Creates new form ClaimSheetManager */
    public ClaimSheetManager() {
        initComponents();
        claimSheetDataController = new ClaimSheetDataController(claimSheetDataPanel1);

        claimSheetSearchController = new ClaimSheetSearchController(claimTablePanel1);
        claimSheetSearchPanel1.setSearchController(claimSheetSearchController);

        claimTablePanel1.setDataController(claimSheetDataController);
        claimTablePanel1.setSearchPanel(claimSheetSearchPanel1);
        claimSheetSearchController.updateSearch();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        claimSheetDataPanel1 = new eclaimer.GUI.ClaimSheetDataPanel();
        jButton1 = new javax.swing.JButton();
        claimTablePanel1 = new eclaimer.GUI.ClaimTablePanel();
        claimSheetSearchPanel1 = new eclaimer.GUI.ClaimSheetSearchPanel();
        jButton2 = new javax.swing.JButton();

        setResizable(false);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jButton1.setText("Export  to .DOC");
        jButton1.setToolTipText("Print Claim Sheets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                export(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18));
        jButton2.setText("Claim Un-Eclaimed");
        jButton2.setToolTipText("Print Claim Sheets");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                claimUnEclaimed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(claimTablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                    .addComponent(claimSheetSearchPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .addComponent(claimSheetDataPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(claimSheetSearchPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(claimTablePanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                    .addComponent(claimSheetDataPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exports the contents of the table to a .doc, with each claim getting its own page.
     *
     * @param evt
     */
    private void export(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_export

        File defaultFileLocation = new File(FileManager.getDocumentsPath().getPath());
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(defaultFileLocation);

        String theFile = "";
        fc.showSaveDialog(null);
        if(fc.getSelectedFile()!=null)theFile = fc.getSelectedFile().getAbsolutePath();

        String formattedString = theFile.replaceAll(".doc", "");
        File fileToSave = new File(formattedString+".doc");

        try
        {
            FileWriter fw = new FileWriter (fileToSave);
            BufferedWriter bw = new BufferedWriter (fw);
            PrintWriter outFile = new PrintWriter (bw);

            ArrayList<ClaimSheet> claimSheets = claimTablePanel1.getAllClaimSheets();
            String complete = "";
            
            for(ClaimSheet s : claimSheets)
            {
                complete += ("~ Laptop Repair Sheet ~");
                complete += ("\n\n\nLaptop ID: " + s.getLaptopID().toUpperCase());
                complete += ("\n\nPart 1: " + s.getPart1() + " Part 2: " + s.getPart2() + " Part 3: " + s.getPart3());
                complete += ("\n\nDescription: " + s.getProblemDescription() + " - Is Protec: " + s.getIsProtec());
                complete += ("\n\nClaim Number: " + s.getClaimNumber());
                complete += ("\n\n\nReturned Date: " + s.getDate());
                complete += ("\n\n\nTracking Number: " + s.getTrackingNumber().toUpperCase());
                if(claimSheets.indexOf(s) != claimSheets.size()-1)complete += ("\f");
            }

            outFile.print(complete);
            outFile.close();
        }

        catch(Exception ex)
        {
            AlertWindow window = new AlertWindow();
            window.setErrorMessage("Error: Could not export claim sheets to the .DOC file.\nDescription: " + ex.toString());
            window.setVisible(true);
        }
    }//GEN-LAST:event_export

    /**
     * Eclaims all of the claim sheets on the database that are lacking an Eclaim number i.e.(not Eclaimed)
     * 
     * @param evt
     */
    private void claimUnEclaimed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_claimUnEclaimed
        GlobalUpdater gu = GlobalUpdater.getInstance();

        DatabaseManager dm = new DatabaseManager();

        int claimNum = this.getLastUsedClaimNumber();

        for(ClaimSheet s :  dm.getClaimSheetsForSearchParameters(null, null, null, null, null, null, true))
        {
            claimNum++;
            s.setClaimNumber(claimNum+"");
            Eclaim eclaim = new Eclaim(s.getClaimNumber(),s.getLaptopID(),s.getLaptopModel(),s.getPart1(),s.getPart2(),s.getPart3(),s.getIsProtec(),s.getProblemDescription());
            dm.updateClaimSheet(s);
            gu.getTablePanel().addEclaimManually(eclaim);
        }

        this.setLastUsedClaimNumber(claimNum);

        claimTablePanel1.updateTable();

        this.dispose();
    }//GEN-LAST:event_claimUnEclaimed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClaimSheetManager().setVisible(true);
            }
        });
    }

    /**
     * Gets the last used claim number from file. So when eclaimer launches it automatically
     * adjusts the claim number value for the user, so they don't have to remember.
     *
     * @return the last used claim number
     */
     public int getLastUsedClaimNumber()
    {
        Integer number = null;
        File fileName = new File(FileManager.getAppSupportPath().getPath()+"/ClaimNumberSetting");
	FileInputStream fis = null;
        ObjectInputStream in = null;

	try {
            fis = new FileInputStream(fileName);
            in = new ObjectInputStream(fis);
            number = (Integer) in.readObject();
            in.close();
	}

        catch (IOException ex) {
            AlertWindow window = new AlertWindow();
            window.setErrorMessage("Error: Missing support file, please restart program to regenerate file.");
            window.setVisible(true);
	}

        catch (ClassNotFoundException ex) {
	}

        return number.intValue();
    }

     /**
     * Saves the last used claim number to a file for later use, like when the program
     * re-launches. This will help the user not have to remember the last used claim number.
     *
     * @param number the claim number to save.
     */
    public void setLastUsedClaimNumber(int number)
    {
        File fileName = new File(FileManager.getAppSupportPath().getPath()+"/ClaimNumberSetting");

	FileOutputStream fos = null;
	ObjectOutputStream out = null;

        try {
		fos = new FileOutputStream(fileName);
		out = new ObjectOutputStream(fos);
		out.writeObject(new Integer(number));
                out.close();
	}

        catch (IOException ex) {
            AlertWindow window = new AlertWindow();
            window.setErrorMessage("Error: Missing support file, please restart program to regenerate file.");
            window.setVisible(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private eclaimer.GUI.ClaimSheetDataPanel claimSheetDataPanel1;
    private eclaimer.GUI.ClaimSheetSearchPanel claimSheetSearchPanel1;
    private eclaimer.GUI.ClaimTablePanel claimTablePanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables

}
